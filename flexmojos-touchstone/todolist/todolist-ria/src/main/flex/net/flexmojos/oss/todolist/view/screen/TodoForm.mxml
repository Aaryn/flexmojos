<?xml version="1.0" encoding="utf-8"?>
<!--

    Flexmojos is a set of maven goals to allow maven users to compile, optimize and test Flex SWF, Flex SWC, Air SWF and Air SWC.
    Copyright (C) 2008-2012  Marvin Froeder <marvin@flexmojos.net>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				preinitialize="init()" creationComplete="getList()"
                layout="vertical" width="488" height="384" >

	<mx:Metadata>
		[ResourceBundle("todolist")]
	</mx:Metadata>

    <mx:Form width="100%" height="100%" defaultButton="{saveButton}">
        <mx:FormHeading label="{resourceManager.getString(BUNDLE, 'LIST')}" width="100%"/>
        <mx:FormItem label="{resourceManager.getString(BUNDLE, 'ID')}:" width="127">
            <mx:TextInput width="100%" id="idText"
                          text="{TodoItem(todoDatagrid.selectedItem).id}" editable="false" enabled="false"/>
        </mx:FormItem>
        <mx:FormItem label="{resourceManager.getString(BUNDLE, 'TITLE')}:" width="345">
            <mx:TextInput width="100%" id="titleText"
                          text="{TodoItem(todoDatagrid.selectedItem).title}"/>
        </mx:FormItem>
        <mx:DataGrid id="todoDatagrid" width="100%" height="100%" dataProvider="{todoItems}">
            <mx:columns>
                <mx:DataGridColumn headerText="{resourceManager.getString(BUNDLE, 'ID')}" dataField="id" width="100"/>
                <mx:DataGridColumn headerText="{resourceManager.getString(BUNDLE, 'TITLE')}" dataField="title"/>
            </mx:columns>
        </mx:DataGrid>
    </mx:Form>

    <mx:ControlBar horizontalAlign="center">
        <mx:Button label="{resourceManager.getString(BUNDLE, 'NEW')}" click="setDefault()"/>
        <mx:Button label="{resourceManager.getString(BUNDLE, 'SAVE')}" id="saveButton" click="save()"
                   textAlign="center"/>
        <mx:Button label="{resourceManager.getString(BUNDLE, 'DELETE')}" click="remove()"/>
    </mx:ControlBar>

    <mx:Script>
        <![CDATA[
	        import net.flexmojos.oss.todolist.domain.TodoItem;
	    	import net.flexmojos.oss.todolist.business.ITodoService;
	    	import net.flexmojos.oss.todolist.business.TodoService;
	        import mx.collections.ArrayCollection;
	        import mx.rpc.events.ResultEvent;
	        import mx.rpc.events.FaultEvent;
	        import mx.rpc.Responder;
	        import mx.controls.Alert;
	        
	        private static const BUNDLE:String = "todolist";
	        
	        private var service:ITodoService;
	
	        [Bindable]
	        private var todoItems:ArrayCollection;
	
			private function init():void {
				service = new TodoService("todoService");
				service.addEventListener(FaultEvent.FAULT, onFault);
			}
	
	        public function getList():void
	        {
	            service.getList().addResponder(new mx.rpc.Responder(onResultGetList, onFault));
	        }
	
	        public function onResultGetList(event:ResultEvent):void
	        {
	            todoItems = event.result as ArrayCollection;
	        }

	        public function save():void
	        {
	            var todoItem:TodoItem = new TodoItem();
	            todoItem.id = idText.text;
	            todoItem.title = titleText.text;
	            service.save(todoItem).addResponder(new mx.rpc.Responder(onResultSave, onFault));
	        }
	
	        public function onResultSave(event:ResultEvent):void
	        {
	            status = resourceManager.getString(BUNDLE, 'MSG_SAVE', [ TodoItem(event.result).id ]);
	            setDefault();
	            getList();
	        }
	
	        public function remove():void
	        {
	            if (todoDatagrid.selectedItem != null) {
	                var todoItem:TodoItem = todoDatagrid.selectedItem as TodoItem;
	                service.remove(todoItem).addResponder(new mx.rpc.Responder(onResultRemove, onFault));
	            } else {
	                Alert.show(resourceManager.getString(BUNDLE, 'MSG_SELECT'));
	            }
	        }
	
	        public function onResultRemove(event:ResultEvent):void
	        {
	            status = resourceManager.getString(BUNDLE, 'MSG_DEL');
	            getList();
	        }
	
	        public function setDefault():void
	        {
	            idText.text = "";
	            titleText.text = "";
	        }
	
	
	        public function onFault(event:FaultEvent):void
	        {
	            Alert.show(resourceManager.getString(BUNDLE, 'MSG_ERROR') + event.fault.message);
	        }
        ]]>
    </mx:Script>
</mx:TitleWindow>
